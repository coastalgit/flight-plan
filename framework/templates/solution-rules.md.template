# Solution Rules: {{SOLUTION_NAME}}

**Version:** v{{VERSION}}  
**Last Updated:** {{LAST_UPDATED}}

---

## Purpose

This file defines solution-wide rules, tools, and standards that apply to all projects.

All projects inherit these rules via their `project-rules.md` files.

---

## MCP Servers (All Projects)

{{MCP_SERVERS}}

Example:
```json
{
  "mcpServers": {
    "firebase": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-firebase"]
    }
  }
}
```

**Usage:** Describe how projects use this MCP server

---

## Development Tools (All Projects)

**Version Control:**
- Git workflow: {{GIT_WORKFLOW}}
- Branch strategy: {{BRANCH_STRATEGY}}

**Code Quality:**
- Minimum test coverage: {{COVERAGE}}%
- Code review: {{REVIEW_POLICY}}
- Linting: {{LINTING_TOOLS}}

**Documentation:**
- README required: Yes
- API documentation: {{API_DOCS_TOOL}}

---

## AI Integration

**Flight Plan:** All projects use Flight Plan methodology (8 phases)

**Context Files for Any AI (when in a project):**
1. Read `docs/project-rules.md` (project-specific, includes solution standards)
2. Read `docs/project-prd.md` (what to build - single source of truth)
3. Read `.flight-plan/current.md` (current phase and status)
4. Read `.flight-plan/FLIGHT-PLAN-COMMANDS.md` (when user runs commands)

**Flight Plan Commands:**

When user runs any `flight-plan` command, AI must read execution logic from `FLIGHT-PLAN-COMMANDS.md`.

Available commands:
- Solution-level: `init`, `status`, `sync`, `help`
- Project-level: `status`, `prd refresh`, `note`, `help` (each project has its own copy)

Projects are STANDALONE - each has its own `FLIGHT-PLAN-COMMANDS.md` copy.

---

## Security Standards (All Projects)

{{SECURITY_STANDARDS}}

Example:
- No secrets in code
- Environment variables for config
- HTTPS only
- Input validation required
- Authentication required

---

## Solution Architecture

{{SOLUTION_ARCHITECTURE}}

```
Example:
frontend → backend → database
          ↓
      notifications
```

**Shared Services:**
{{SHARED_SERVICES}}

---

## Quality Standards (All Projects)

**Performance:**
{{PERFORMANCE_STANDARDS}}

**Reliability:**
{{RELIABILITY_STANDARDS}}

**Monitoring:**
{{MONITORING_APPROACH}}

---

## Deployment Standards

**Environments:**
- Development: {{DEV_ENV}}
- Staging: {{STAGING_ENV}}
- Production: {{PROD_ENV}}

**CI/CD:**
{{CICD_APPROACH}}

---

**Projects inherit these rules and add their own in project-rules.md**

**Template Version:** 1.0  
**Generated:** {{GENERATION_DATE}}

